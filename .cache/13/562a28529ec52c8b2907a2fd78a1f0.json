{"id":"node_modules/parse/lib/browser/ParseGeoPoint.js","dependencies":[{"name":"C:\\Users\\Devon Blake\\Documents\\apps\\champsWeb\\package.json","includedInParent":true,"mtime":1558292573845},{"name":"C:\\Users\\Devon Blake\\Documents\\apps\\champsWeb\\node_modules\\parse\\package.json","includedInParent":true,"mtime":1558291325981},{"name":"@babel/runtime/helpers/interopRequireDefault","loc":{"line":3,"column":37},"parent":"C:\\Users\\Devon Blake\\Documents\\apps\\champsWeb\\node_modules\\parse\\lib\\browser\\ParseGeoPoint.js","resolved":"C:\\Users\\Devon Blake\\Documents\\apps\\champsWeb\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js"},{"name":"@babel/runtime/helpers/typeof","loc":{"line":10,"column":46},"parent":"C:\\Users\\Devon Blake\\Documents\\apps\\champsWeb\\node_modules\\parse\\lib\\browser\\ParseGeoPoint.js","resolved":"C:\\Users\\Devon Blake\\Documents\\apps\\champsWeb\\node_modules\\@babel\\runtime\\helpers\\typeof.js"},{"name":"@babel/runtime/helpers/classCallCheck","loc":{"line":12,"column":54},"parent":"C:\\Users\\Devon Blake\\Documents\\apps\\champsWeb\\node_modules\\parse\\lib\\browser\\ParseGeoPoint.js","resolved":"C:\\Users\\Devon Blake\\Documents\\apps\\champsWeb\\node_modules\\@babel\\runtime\\helpers\\classCallCheck.js"},{"name":"@babel/runtime/helpers/createClass","loc":{"line":14,"column":51},"parent":"C:\\Users\\Devon Blake\\Documents\\apps\\champsWeb\\node_modules\\parse\\lib\\browser\\ParseGeoPoint.js","resolved":"C:\\Users\\Devon Blake\\Documents\\apps\\champsWeb\\node_modules\\@babel\\runtime\\helpers\\createClass.js"},{"name":"@babel/runtime/helpers/defineProperty","loc":{"line":16,"column":54},"parent":"C:\\Users\\Devon Blake\\Documents\\apps\\champsWeb\\node_modules\\parse\\lib\\browser\\ParseGeoPoint.js","resolved":"C:\\Users\\Devon Blake\\Documents\\apps\\champsWeb\\node_modules\\@babel\\runtime\\helpers\\defineProperty.js"}],"generated":{"js":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n/**\n * Creates a new GeoPoint with any of the following forms:<br>\n *   <pre>\n *   new GeoPoint(otherGeoPoint)\n *   new GeoPoint(30, 30)\n *   new GeoPoint([30, 30])\n *   new GeoPoint({latitude: 30, longitude: 30})\n *   new GeoPoint()  // defaults to (0, 0)\n *   </pre>\n * <p>Represents a latitude / longitude point that may be associated\n * with a key in a ParseObject or used as a reference point for geo queries.\n * This allows proximity-based queries on the key.</p>\n *\n * <p>Only one key in a class may contain a GeoPoint.</p>\n *\n * <p>Example:<pre>\n *   var point = new Parse.GeoPoint(30.0, -20.0);\n *   var object = new Parse.Object(\"PlaceObject\");\n *   object.set(\"location\", point);\n *   object.save();</pre></p>\n * @alias Parse.GeoPoint\n */\n\n/* global navigator */\n\n\nvar ParseGeoPoint =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param {(Number[]|Object|Number)} options Either a list of coordinate pairs, an object with `latitude`, `longitude`, or the latitude or the point.\n   * @param {Number} longitude The longitude of the GeoPoint\n   */\n  function ParseGeoPoint(arg1\n  /*: Array<number> |\n      { latitude: number; longitude: number } |\n      number*/\n  , arg2\n  /*:: ?: number*/\n  ) {\n    (0, _classCallCheck2.default)(this, ParseGeoPoint);\n    (0, _defineProperty2.default)(this, \"_latitude\", void 0);\n    (0, _defineProperty2.default)(this, \"_longitude\", void 0);\n\n    if (Array.isArray(arg1)) {\n      ParseGeoPoint._validate(arg1[0], arg1[1]);\n\n      this._latitude = arg1[0];\n      this._longitude = arg1[1];\n    } else if ((0, _typeof2.default)(arg1) === 'object') {\n      ParseGeoPoint._validate(arg1.latitude, arg1.longitude);\n\n      this._latitude = arg1.latitude;\n      this._longitude = arg1.longitude;\n    } else if (arg1 !== undefined && arg2 !== undefined) {\n      ParseGeoPoint._validate(arg1, arg2);\n\n      this._latitude = arg1;\n      this._longitude = arg2;\n    } else {\n      this._latitude = 0;\n      this._longitude = 0;\n    }\n  }\n  /**\n   * North-south portion of the coordinate, in range [-90, 90].\n   * Throws an exception if set out of range in a modern browser.\n   * @property latitude\n   * @type Number\n   */\n\n\n  (0, _createClass2.default)(ParseGeoPoint, [{\n    key: \"toJSON\",\n\n    /**\n     * Returns a JSON representation of the GeoPoint, suitable for Parse.\n      * @return {Object}\n     */\n    value: function ()\n    /*: { __type: string; latitude: number; longitude: number }*/\n    {\n      ParseGeoPoint._validate(this._latitude, this._longitude);\n\n      return {\n        __type: 'GeoPoint',\n        latitude: this._latitude,\n        longitude: this._longitude\n      };\n    }\n  }, {\n    key: \"equals\",\n    value: function (other\n    /*: mixed*/\n    )\n    /*: boolean*/\n    {\n      return other instanceof ParseGeoPoint && this.latitude === other.latitude && this.longitude === other.longitude;\n    }\n    /**\n     * Returns the distance from this GeoPoint to another in radians.\n      * @param {Parse.GeoPoint} point the other Parse.GeoPoint.\n     * @return {Number}\n     */\n\n  }, {\n    key: \"radiansTo\",\n    value: function (point\n    /*: ParseGeoPoint*/\n    )\n    /*: number*/\n    {\n      var d2r = Math.PI / 180.0;\n      var lat1rad = this.latitude * d2r;\n      var long1rad = this.longitude * d2r;\n      var lat2rad = point.latitude * d2r;\n      var long2rad = point.longitude * d2r;\n      var sinDeltaLatDiv2 = Math.sin((lat1rad - lat2rad) / 2);\n      var sinDeltaLongDiv2 = Math.sin((long1rad - long2rad) / 2); // Square of half the straight line chord distance between both points.\n\n      var a = sinDeltaLatDiv2 * sinDeltaLatDiv2 + Math.cos(lat1rad) * Math.cos(lat2rad) * sinDeltaLongDiv2 * sinDeltaLongDiv2;\n      a = Math.min(1.0, a);\n      return 2 * Math.asin(Math.sqrt(a));\n    }\n    /**\n     * Returns the distance from this GeoPoint to another in kilometers.\n      * @param {Parse.GeoPoint} point the other Parse.GeoPoint.\n     * @return {Number}\n     */\n\n  }, {\n    key: \"kilometersTo\",\n    value: function (point\n    /*: ParseGeoPoint*/\n    )\n    /*: number*/\n    {\n      return this.radiansTo(point) * 6371.0;\n    }\n    /**\n     * Returns the distance from this GeoPoint to another in miles.\n      * @param {Parse.GeoPoint} point the other Parse.GeoPoint.\n     * @return {Number}\n     */\n\n  }, {\n    key: \"milesTo\",\n    value: function (point\n    /*: ParseGeoPoint*/\n    )\n    /*: number*/\n    {\n      return this.radiansTo(point) * 3958.8;\n    }\n    /*\n     * Throws an exception if the given lat-long is out of bounds.\n     */\n\n  }, {\n    key: \"latitude\",\n    get: function ()\n    /*: number*/\n    {\n      return this._latitude;\n    },\n    set: function (val\n    /*: number*/\n    ) {\n      ParseGeoPoint._validate(val, this.longitude);\n\n      this._latitude = val;\n    }\n    /**\n     * East-west portion of the coordinate, in range [-180, 180].\n     * Throws if set out of range in a modern browser.\n     * @property longitude\n     * @type Number\n     */\n\n  }, {\n    key: \"longitude\",\n    get: function ()\n    /*: number*/\n    {\n      return this._longitude;\n    },\n    set: function (val\n    /*: number*/\n    ) {\n      ParseGeoPoint._validate(this.latitude, val);\n\n      this._longitude = val;\n    }\n  }], [{\n    key: \"_validate\",\n    value: function (latitude\n    /*: number*/\n    , longitude\n    /*: number*/\n    ) {\n      if (isNaN(latitude) || isNaN(longitude) || typeof latitude !== 'number' || typeof longitude !== 'number') {\n        throw new TypeError('GeoPoint latitude and longitude must be valid numbers');\n      }\n\n      if (latitude < -90.0) {\n        throw new TypeError('GeoPoint latitude out of bounds: ' + latitude + ' < -90.0.');\n      }\n\n      if (latitude > 90.0) {\n        throw new TypeError('GeoPoint latitude out of bounds: ' + latitude + ' > 90.0.');\n      }\n\n      if (longitude < -180.0) {\n        throw new TypeError('GeoPoint longitude out of bounds: ' + longitude + ' < -180.0.');\n      }\n\n      if (longitude > 180.0) {\n        throw new TypeError('GeoPoint longitude out of bounds: ' + longitude + ' > 180.0.');\n      }\n    }\n    /**\n     * Creates a GeoPoint with the user's current location, if available.\n     * Calls options.success with a new GeoPoint instance or calls options.error.\n     * @static\n     */\n\n  }, {\n    key: \"current\",\n    value: function () {\n      return navigator.geolocation.getCurrentPosition(function (location) {\n        return new ParseGeoPoint(location.coords.latitude, location.coords.longitude);\n      });\n    }\n  }]);\n  return ParseGeoPoint;\n}();\n\nvar _default = ParseGeoPoint;\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/parse/lib/browser/ParseGeoPoint.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}}],"sources":{"node_modules/parse/lib/browser/ParseGeoPoint.js":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n/**\n * Creates a new GeoPoint with any of the following forms:<br>\n *   <pre>\n *   new GeoPoint(otherGeoPoint)\n *   new GeoPoint(30, 30)\n *   new GeoPoint([30, 30])\n *   new GeoPoint({latitude: 30, longitude: 30})\n *   new GeoPoint()  // defaults to (0, 0)\n *   </pre>\n * <p>Represents a latitude / longitude point that may be associated\n * with a key in a ParseObject or used as a reference point for geo queries.\n * This allows proximity-based queries on the key.</p>\n *\n * <p>Only one key in a class may contain a GeoPoint.</p>\n *\n * <p>Example:<pre>\n *   var point = new Parse.GeoPoint(30.0, -20.0);\n *   var object = new Parse.Object(\"PlaceObject\");\n *   object.set(\"location\", point);\n *   object.save();</pre></p>\n * @alias Parse.GeoPoint\n */\n\n/* global navigator */\n\n\nvar ParseGeoPoint =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param {(Number[]|Object|Number)} options Either a list of coordinate pairs, an object with `latitude`, `longitude`, or the latitude or the point.\n   * @param {Number} longitude The longitude of the GeoPoint\n   */\n  function ParseGeoPoint(arg1\n  /*: Array<number> |\n      { latitude: number; longitude: number } |\n      number*/\n  , arg2\n  /*:: ?: number*/\n  ) {\n    (0, _classCallCheck2.default)(this, ParseGeoPoint);\n    (0, _defineProperty2.default)(this, \"_latitude\", void 0);\n    (0, _defineProperty2.default)(this, \"_longitude\", void 0);\n\n    if (Array.isArray(arg1)) {\n      ParseGeoPoint._validate(arg1[0], arg1[1]);\n\n      this._latitude = arg1[0];\n      this._longitude = arg1[1];\n    } else if ((0, _typeof2.default)(arg1) === 'object') {\n      ParseGeoPoint._validate(arg1.latitude, arg1.longitude);\n\n      this._latitude = arg1.latitude;\n      this._longitude = arg1.longitude;\n    } else if (arg1 !== undefined && arg2 !== undefined) {\n      ParseGeoPoint._validate(arg1, arg2);\n\n      this._latitude = arg1;\n      this._longitude = arg2;\n    } else {\n      this._latitude = 0;\n      this._longitude = 0;\n    }\n  }\n  /**\n   * North-south portion of the coordinate, in range [-90, 90].\n   * Throws an exception if set out of range in a modern browser.\n   * @property latitude\n   * @type Number\n   */\n\n\n  (0, _createClass2.default)(ParseGeoPoint, [{\n    key: \"toJSON\",\n\n    /**\n     * Returns a JSON representation of the GeoPoint, suitable for Parse.\n      * @return {Object}\n     */\n    value: function ()\n    /*: { __type: string; latitude: number; longitude: number }*/\n    {\n      ParseGeoPoint._validate(this._latitude, this._longitude);\n\n      return {\n        __type: 'GeoPoint',\n        latitude: this._latitude,\n        longitude: this._longitude\n      };\n    }\n  }, {\n    key: \"equals\",\n    value: function (other\n    /*: mixed*/\n    )\n    /*: boolean*/\n    {\n      return other instanceof ParseGeoPoint && this.latitude === other.latitude && this.longitude === other.longitude;\n    }\n    /**\n     * Returns the distance from this GeoPoint to another in radians.\n      * @param {Parse.GeoPoint} point the other Parse.GeoPoint.\n     * @return {Number}\n     */\n\n  }, {\n    key: \"radiansTo\",\n    value: function (point\n    /*: ParseGeoPoint*/\n    )\n    /*: number*/\n    {\n      var d2r = Math.PI / 180.0;\n      var lat1rad = this.latitude * d2r;\n      var long1rad = this.longitude * d2r;\n      var lat2rad = point.latitude * d2r;\n      var long2rad = point.longitude * d2r;\n      var sinDeltaLatDiv2 = Math.sin((lat1rad - lat2rad) / 2);\n      var sinDeltaLongDiv2 = Math.sin((long1rad - long2rad) / 2); // Square of half the straight line chord distance between both points.\n\n      var a = sinDeltaLatDiv2 * sinDeltaLatDiv2 + Math.cos(lat1rad) * Math.cos(lat2rad) * sinDeltaLongDiv2 * sinDeltaLongDiv2;\n      a = Math.min(1.0, a);\n      return 2 * Math.asin(Math.sqrt(a));\n    }\n    /**\n     * Returns the distance from this GeoPoint to another in kilometers.\n      * @param {Parse.GeoPoint} point the other Parse.GeoPoint.\n     * @return {Number}\n     */\n\n  }, {\n    key: \"kilometersTo\",\n    value: function (point\n    /*: ParseGeoPoint*/\n    )\n    /*: number*/\n    {\n      return this.radiansTo(point) * 6371.0;\n    }\n    /**\n     * Returns the distance from this GeoPoint to another in miles.\n      * @param {Parse.GeoPoint} point the other Parse.GeoPoint.\n     * @return {Number}\n     */\n\n  }, {\n    key: \"milesTo\",\n    value: function (point\n    /*: ParseGeoPoint*/\n    )\n    /*: number*/\n    {\n      return this.radiansTo(point) * 3958.8;\n    }\n    /*\n     * Throws an exception if the given lat-long is out of bounds.\n     */\n\n  }, {\n    key: \"latitude\",\n    get: function ()\n    /*: number*/\n    {\n      return this._latitude;\n    },\n    set: function (val\n    /*: number*/\n    ) {\n      ParseGeoPoint._validate(val, this.longitude);\n\n      this._latitude = val;\n    }\n    /**\n     * East-west portion of the coordinate, in range [-180, 180].\n     * Throws if set out of range in a modern browser.\n     * @property longitude\n     * @type Number\n     */\n\n  }, {\n    key: \"longitude\",\n    get: function ()\n    /*: number*/\n    {\n      return this._longitude;\n    },\n    set: function (val\n    /*: number*/\n    ) {\n      ParseGeoPoint._validate(this.latitude, val);\n\n      this._longitude = val;\n    }\n  }], [{\n    key: \"_validate\",\n    value: function (latitude\n    /*: number*/\n    , longitude\n    /*: number*/\n    ) {\n      if (isNaN(latitude) || isNaN(longitude) || typeof latitude !== 'number' || typeof longitude !== 'number') {\n        throw new TypeError('GeoPoint latitude and longitude must be valid numbers');\n      }\n\n      if (latitude < -90.0) {\n        throw new TypeError('GeoPoint latitude out of bounds: ' + latitude + ' < -90.0.');\n      }\n\n      if (latitude > 90.0) {\n        throw new TypeError('GeoPoint latitude out of bounds: ' + latitude + ' > 90.0.');\n      }\n\n      if (longitude < -180.0) {\n        throw new TypeError('GeoPoint longitude out of bounds: ' + longitude + ' < -180.0.');\n      }\n\n      if (longitude > 180.0) {\n        throw new TypeError('GeoPoint longitude out of bounds: ' + longitude + ' > 180.0.');\n      }\n    }\n    /**\n     * Creates a GeoPoint with the user's current location, if available.\n     * Calls options.success with a new GeoPoint instance or calls options.error.\n     * @static\n     */\n\n  }, {\n    key: \"current\",\n    value: function () {\n      return navigator.geolocation.getCurrentPosition(function (location) {\n        return new ParseGeoPoint(location.coords.latitude, location.coords.longitude);\n      });\n    }\n  }]);\n  return ParseGeoPoint;\n}();\n\nvar _default = ParseGeoPoint;\nexports.default = _default;"},"lineCount":266}},"error":null,"hash":"539827fc08c362b53a47afa0b04a227b","cacheData":{"env":{}}}